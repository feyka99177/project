from aiogram import Router, F
from aiogram.types import Message
from database import *
from keyboards import *
from config import logger

router = Router()

@dp.message(F.text)
async def handle_all_messages(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    if user_id not in user_states:
        # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞
        if text in get_user_lists(user_id):
            items = get_list_items(user_id, text)
            response = f"üìã –°–ø–∏—Å–æ–∫ {text}:\n" + "\n".join(f"‚Ä¢ {item}" for item in items) if items else f"–°–ø–∏—Å–æ–∫ '{text}' –ø—É—Å—Ç."
            await message.answer(response)
        return
    state = user_states[user_id]
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    if state.get("action") == "awaiting_list_name":
        if not text:
            return await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        if text in get_user_lists(user_id):
            return await message.answer("–°–ø–∏—Å–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        create_list(user_id, text)
        await message.answer(f"–°–ø–∏—Å–æ–∫ '{text}' —Å–æ–∑–¥–∞–Ω!")
        del user_states[user_id]
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    elif state.get("action") == "awaiting_item_for_list":
        list_name = state["selected_list"]
        items = get_list_items(user_id, list_name)
        if text in items:
            await message.answer("–¢–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        else:
            items.append(text)
            save_list_items(user_id, list_name, items)
            await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ '{list_name}': {text}")
        del user_states[user_id]
    # –ü–æ–∏—Å–∫
    elif state.get("action") == "awaiting_search_query":
        found = search_items(user_id, text)
        if found:
            await message.answer("–ù–∞–π–¥–µ–Ω–æ:\n" + "\n".join(found))
        else:
            await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        del user_states[user_id]
    # –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
    elif state.get("action") == "awaiting_share_id":
        list_name = state["list_name"]
        try:
            target_id = int(text)
            share_list(user_id, list_name, target_id)
            await message.answer(f"–°–ø–∏—Å–æ–∫ '{list_name}' —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}!")
        except Exception:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        del user_states[user_id]
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    elif state.get("action") == "awaiting_reminder_time":
        list_name = state["list_name"]
        try:
            hour, minute = map(int, text.split(":"))
            now = datetime.now()
            remind_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
            if remind_time < now:
                remind_time += timedelta(days=1)
            set_reminder(user_id, list_name, remind_time.strftime("%Y-%m-%d %H:%M"))
            await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ '{list_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_time.strftime('%d.%m %H:%M')}")
        except Exception:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 09:30")
        del user_states[user_id]
