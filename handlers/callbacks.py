from aiogram import Router, types
from database import *
from keyboards import *
from config import logger

router = Router()

@dp.callback_query(ListCallback.filter(F.action == "view"))
async def view_list_items(callback: types.CallbackQuery, callback_data: ListCallback):
    user_id = callback.from_user.id
    list_name = callback_data.list_name
    items = get_list_items(user_id, list_name)

    if not items:
        await callback.message.edit_text(
            f"–°–ø–∏—Å–æ–∫ '{list_name}' –ø—É—Å—Ç.",
            reply_markup=lists_keyboard(get_user_lists(user_id), "view")
        )
        return

    items_text = "\n".join(f"‚Ä¢ {item}" for item in items)
    await callback.message.edit_text(
        f"üìã –°–ø–∏—Å–æ–∫: {list_name}\n{items_text}",
        reply_markup=items_keyboard(list_name, items)
    )


@dp.callback_query(ListCallback.filter(F.action == "add_to_selected_list"))
async def add_to_selected_list_handler(callback: types.CallbackQuery, callback_data: ListCallback):
    user_id = callback.from_user.id
    list_name = callback_data.list_name
    user_states[user_id] = {"action": "awaiting_item_for_list", "selected_list": list_name}
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ '{list_name}':")
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "confirm_delete"))
async def confirm_delete_list(callback: types.CallbackQuery, callback_data: ListCallback):
    builder = InlineKeyboardBuilder()
    builder.button(
        text='‚úÖ –î–∞',
        callback_data=ListCallback(action="execute_delete", list_name=callback_data.list_name).pack()
    )
    builder.button(
        text='‚ùå –ù–µ—Ç',
        callback_data=ListCallback(action="cancel_delete").pack()
    )
    await callback.message.edit_text(
        f"–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ '{callback_data.list_name}'?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "execute_delete"))
async def execute_delete_list(callback: types.CallbackQuery, callback_data: ListCallback):
    delete_list(callback.from_user.id, callback_data.list_name)
    await callback.message.edit_text(f"–°–ø–∏—Å–æ–∫ '{callback_data.list_name}' —É–¥–∞–ª—ë–Ω!")
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "cancel_delete"))
async def cancel_delete_handler(callback: types.CallbackQuery):
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "select_list_for_deletion"))
async def select_items_for_deletion(callback: types.CallbackQuery, callback_data: ListCallback):
    user_id = callback.from_user.id
    items = get_list_items(user_id, callback_data.list_name)
    if not items:
        await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        await callback.answer()
        return
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ '{callback_data.list_name}':",
        reply_markup=items_keyboard(callback_data.list_name, items, for_delete=True)
    )
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "confirm_item_delete"))
async def confirm_delete_item(callback: types.CallbackQuery, callback_data: ListCallback):
    builder = InlineKeyboardBuilder()
    builder.button(
        text='‚úÖ –î–∞',
        callback_data=ListCallback(
            action="execute_item_delete",
            list_name=callback_data.list_name,
            item=callback_data.item
        ).pack()
    )
    builder.button(
        text='‚ùå –ù–µ—Ç',
        callback_data=ListCallback(action="cancel_delete").pack()
    )
    await callback.message.edit_text(
        f"–£–¥–∞–ª–∏—Ç—å '{callback_data.item}' –∏–∑ '{callback_data.list_name}'?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "execute_item_delete"))
async def execute_delete_item(callback: types.CallbackQuery, callback_data: ListCallback):
    user_id = callback.from_user.id
    items = get_list_items(user_id, callback_data.list_name)
    if callback_data.item in items:
        items.remove(callback_data.item)
        save_list_items(user_id, callback_data.list_name, items)
        await callback.message.edit_text(f"–≠–ª–µ–º–µ–Ω—Ç '{callback_data.item}' —É–¥–∞–ª—ë–Ω!")
    else:
        await callback.message.edit_text("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "done"))
async def mark_item_done(callback: types.CallbackQuery, callback_data: ListCallback):
    await callback.message.edit_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {callback_data.item}")
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "close"))
async def close_handler(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞")

@dp.callback_query(ListCallback.filter(F.action == "export_list"))
async def export_list_callback(callback: types.CallbackQuery, callback_data: ListCallback):
    user_id = callback.from_user.id
    text = export_list(user_id, callback_data.list_name)
    await callback.message.answer_document(
        types.BufferedInputFile(text.encode(), filename=f"{callback_data.list_name}.txt"),
        caption=f"–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ '{callback_data.list_name}'"
    )
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "share_list"))
async def share_list_callback(callback: types.CallbackQuery, callback_data: ListCallback):
    user_id = callback.from_user.id
    user_states[user_id] = {"action": "awaiting_share_id", "list_name": callback_data.list_name}
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É.\n"
        "ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @userinfobot"
    )
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "set_reminder"))
async def set_reminder_callback(callback: types.CallbackQuery, callback_data: ListCallback):
    user_id = callback.from_user.id
    user_states[user_id] = {"action": "awaiting_reminder_time", "list_name": callback_data.list_name}
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):"
    )
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "archive_list"))
async def archive_list_callback(callback: types.CallbackQuery, callback_data: ListCallback):
    archive_list(callback.from_user.id, callback_data.list_name)
    await callback.message.edit_text(f"–°–ø–∏—Å–æ–∫ '{callback_data.list_name}' –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "unarchive_list"))
async def unarchive_list_callback(callback: types.CallbackQuery, callback_data: ListCallback):
    unarchive_list(callback.from_user.id, callback_data.list_name)
    await callback.message.edit_text(f"–°–ø–∏—Å–æ–∫ '{callback_data.list_name}' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∞—Ä—Ö–∏–≤–∞!")
    await callback.answer()

@dp.callback_query(ListCallback.filter(F.action == "back_to_lists"))
async def back_to_lists_callback(callback: types.CallbackQuery, callback_data: ListCallback):
    user_id = callback.from_user.id
    lists = get_user_lists(user_id)
    await callback.message.edit_text("–í–∞—à–∏ —Å–ø–∏—Å–∫–∏:", reply_markup=lists_keyboard(lists, "view"))
    await callback.answer()
