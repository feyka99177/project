from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import BotCommand
from database import *
from keyboards import *
from config import logger

router = Router()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await setup_bot_commands()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞–º–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!"
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/create_list - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫\n"
        "/add_to_list - –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫\n"
        "/show_lists - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏\n"
        "/delete_list - –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/delete_item - –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "/search - –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Å–ø–∏—Å–∫–∞–º\n"
        "/export - –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n"
        "/share - –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n"
        "/remind - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞\n"
        "/archive - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/unarchive - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ –∞—Ä—Ö–∏–≤–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await message.answer(help_text)

@dp.message(Command("create_list"))
async def cmd_create_list(message: types.Message):
    user_id = message.from_user.id
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞:')
    user_states[user_id] = {"action": "awaiting_list_name"}

@dp.message(Command("add_to_list"))
async def cmd_add_to_list(message: types.Message):
    user_id = message.from_user.id
    lists = get_user_lists(user_id)
    if not lists:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫:", reply_markup=lists_keyboard(lists, "add_to_selected_list"))

@dp.message(Command("delete_list"))
async def cmd_delete_list(message: types.Message):
    user_id = message.from_user.id
    lists = get_user_lists(user_id)
    if not lists:
        await message.answer("–ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=lists_keyboard(lists, "confirm_delete"))

@dp.message(Command("delete_item"))
async def cmd_delete_item(message: types.Message):
    user_id = message.from_user.id
    lists = get_user_lists(user_id)
    if not lists:
        await message.answer("–ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞:", reply_markup=lists_keyboard(lists, "select_list_for_deletion"))

@dp.message(Command("show_lists"))
async def cmd_show_lists(message: types.Message):
    user_id = message.from_user.id
    lists = get_user_lists(user_id)
    if not lists:
        await message.answer("–°–ø–∏—Å–∫–∏ –ø—É—Å—Ç—ã!")
        return
    await message.answer("–í–∞—à–∏ —Å–ø–∏—Å–∫–∏:", reply_markup=lists_keyboard(lists, "view"))

@dp.message(Command("search"))
async def cmd_search(message: types.Message):
    user_id = message.from_user.id
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º —Å–ø–∏—Å–∫–∞–º:")
    user_states[user_id] = {"action": "awaiting_search_query"}

@dp.message(Command("export"))
async def cmd_export(message: types.Message):
    user_id = message.from_user.id
    lists = get_user_lists(user_id)
    if not lists:
        await message.answer("–ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=lists_keyboard(lists, "export_list"))

@dp.message(Command("share"))
async def cmd_share(message: types.Message):
    user_id = message.from_user.id
    lists = get_user_lists(user_id)
    if not lists:
        await message.answer("–ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:", reply_markup=lists_keyboard(lists, "share_list"))

@dp.message(Command("remind"))
async def cmd_remind(message: types.Message):
    user_id = message.from_user.id
    lists = get_user_lists(user_id)
    if not lists:
        await message.answer("–ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=lists_keyboard(lists, "set_reminder"))

@dp.message(Command("archive"))
async def cmd_archive(message: types.Message):
    user_id = message.from_user.id
    lists = get_user_lists(user_id)
    if not lists:
        await message.answer("–ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=lists_keyboard(lists, "archive_list"))

@dp.message(Command("unarchive"))
async def cmd_unarchive(message: types.Message):
    user_id = message.from_user.id
    lists = get_user_lists(user_id, include_archived=True)
    archived_lists = []
    for name in lists:
        cursor.execute("SELECT archived FROM lists WHERE user_id=? AND list_name=?", (user_id, name))
        if cursor.fetchone()[0] == 1:
            archived_lists.append(name)
    if not archived_lists:
        await message.answer("–ù–µ—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:", reply_markup=lists_keyboard(archived_lists, "unarchive_list"))


